// <auto-generated />
using System;
using BarcodeGenerator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarcodeGenerator.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251014054839_AddBarcodeValueField")]
    partial class AddBarcodeValueField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("BarcodeGenerator.Models.BarcodeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarcodeText")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("BarcodeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("CODE128");

                    b.Property<string>("BarcodeValue")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("DefaultLabelCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<double?>("LastBarcodeHeight")
                        .HasColumnType("REAL");

                    b.Property<double?>("LastBarcodeWidth")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastExportedDate")
                        .HasColumnType("TEXT");

                    b.Property<double?>("LastLabelHeight")
                        .HasColumnType("REAL");

                    b.Property<double?>("LastLabelWidth")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPrintedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPrintCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BarcodeText")
                        .HasDatabaseName("IX_BarcodeRecords_BarcodeText");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_BarcodeRecords_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BarcodeRecords_IsActive");

                    b.HasIndex("LastPrintedDate")
                        .HasDatabaseName("IX_BarcodeRecords_LastPrintedDate");

                    b.ToTable("BarcodeRecords");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.LabelTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BarcodeHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("BarcodeWidth")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<double>("LabelHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("LabelWidth")
                        .HasColumnType("REAL");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_LabelTemplates_IsDefault");

                    b.HasIndex("TemplateName")
                        .HasDatabaseName("IX_LabelTemplates_TemplateName");

                    b.ToTable("LabelTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BarcodeHeight = 20.0,
                            BarcodeWidth = 80.0,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            LabelHeight = 50.0,
                            LabelWidth = 100.0,
                            TemplateName = "Standard 100x50mm"
                        },
                        new
                        {
                            Id = 2,
                            BarcodeHeight = 15.0,
                            BarcodeWidth = 60.0,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            LabelHeight = 25.0,
                            LabelWidth = 75.0,
                            TemplateName = "Small 75x25mm"
                        },
                        new
                        {
                            Id = 3,
                            BarcodeHeight = 30.0,
                            BarcodeWidth = 120.0,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            LabelHeight = 75.0,
                            LabelWidth = 150.0,
                            TemplateName = "Large 150x75mm"
                        });
                });

            modelBuilder.Entity("BarcodeGenerator.Models.PrintHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BarcodeHeight")
                        .HasColumnType("REAL");

                    b.Property<int>("BarcodeRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BarcodeWidth")
                        .HasColumnType("REAL");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double>("LabelHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("LabelWidth")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("PrintedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityPrinted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeRecordId")
                        .HasDatabaseName("IX_PrintHistory_BarcodeRecordId");

                    b.HasIndex("PrintedDate")
                        .HasDatabaseName("IX_PrintHistory_PrintedDate");

                    b.HasIndex("Success")
                        .HasDatabaseName("IX_PrintHistory_Success");

                    b.ToTable("PrintHistory");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.PrintHistory", b =>
                {
                    b.HasOne("BarcodeGenerator.Models.BarcodeRecord", "BarcodeRecord")
                        .WithMany("PrintHistories")
                        .HasForeignKey("BarcodeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BarcodeRecord");
                });

            modelBuilder.Entity("BarcodeGenerator.Models.BarcodeRecord", b =>
                {
                    b.Navigation("PrintHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
